<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Tests on My New Hugo Site</title>
    <link>http://localhost:1313/test/</link>
    <description>Recent content in Tests on My New Hugo Site</description>
    <generator>Hugo -- 0.139.4</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 14 Dec 2024 14:32:12 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/test/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Helloworld</title>
      <link>http://localhost:1313/test/helloworld/</link>
      <pubDate>Sat, 14 Dec 2024 14:32:12 +0800</pubDate>
      <guid>http://localhost:1313/test/helloworld/</guid>
      <description>&lt;h1 id=&#34;react-整体架构&#34;&gt;React 整体架构&lt;/h1&gt;
&lt;p&gt;Stack 架构在进行虚拟 DOM 树比较的时候，采用的是递归，计算会消耗大量的时间，新的 Fiber 架构采用的是链表，可以实现时间切片，防止 JS 的计算占用过多的时间从而导致浏览器出现丢帧的现象。&lt;/p&gt;
&lt;p&gt;React v15 以及之前的架构称之为 Stack 架构，从 v16 开始，React 重构了整体的架构，新的架构被称之为 Fiber 架构，新的架构相比旧架构有一个最大的特点就是能够实现时间切片。&lt;/p&gt;
&lt;h2 id=&#34;旧架构的问题&#34;&gt;旧架构的问题&lt;/h2&gt;
&lt;p&gt;有哪些情况会导致我们的 Web 应用无法快速响应？&lt;/p&gt;
&lt;p&gt;总结起来，实际上有两大类场景会限制快速响应：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当你需要执行大量计算或者设备本身的性能不足的时候，页面就会出现掉帧、卡顿的现象，这个本质上是来自于 CPU 的瓶颈。&lt;/li&gt;
&lt;li&gt;进行 I/O 的时候，需要等待数据返回后再进行后续操作，等待的过程中无法快速响应，这种情况实际上是来自于 I/O 的瓶颈。&lt;/li&gt;
&lt;/ol&gt;</description>
    </item>
  </channel>
</rss>
